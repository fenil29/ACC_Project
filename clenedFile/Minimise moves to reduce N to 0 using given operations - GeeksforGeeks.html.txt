Minimise moves to reduce N to 0 using given operations - GeeksforGeeks                                                   Skip to content                                                      Tutorials  Practice DS &amp; Algo.  Must Do Questions DSA Topic-wise DSA Company-wise  Algorithms  Analysis of Algorithms  Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question  Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms  Data Structures  Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures  Interview Corner  Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes  Languages  C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin  CS Subjects  Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering  GATE  GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS  Web Technologies  HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP  Software Designs  Software Design Patterns System Design Tutorial  School Learning  School Programming Mathematics  Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus  Maths Notes (Class 8-12)  Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes  NCERT Solutions  Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution  RD Sharma Solutions  Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution  Physics Notes (Class 8-11)  Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes   ISRO CS  ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam  UGC NET CS  UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers   Student  Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship  Jobs  Apply for Jobs Post a Job  Courses                    Write   Come write articles for us and get featured         Practice   Learn and code with the best industry experts         Premium   Get access to ad-free content, doubt assistance and more!         Jobs   Come and find your dream job with us       Geeks Digest Quizzes Geeks Campus   Gblog Articles IDE Campus Mantri                Home Saved Videos Courses   GBlog Puzzles What's New ?        Change Language         Data Structures Algorithms Interview Preparation Topic-wise Practice C++ Java Python Competitive Programming Machine Learning Web Development Puzzles Project Ideas School Learning          Related Articles         ?       Related Articles    Optimal Strategy for a Game | DP-31 Minimax Algorithm in Game Theory | Set 1 (Introduction) Minimax Algorithm in Game Theory | Set 3 (Tic-Tac-Toe AI - Finding optimal move) Minimax Algorithm in Game Theory | Set 4 (Alpha-Beta Pruning) Implementation of Tic-Tac-Toe game Combinatorial Game Theory | Set 2 (Game of Nim) Combinatorial Game Theory | Set 1 (Introduction) Minimax Algorithm in Game Theory | Set 2 (Introduction to Evaluation Function) Choice of Area Expectimax Algorithm in Game Theory Find the winner in nim-game Combinatorial Game Theory | Set 3 (Grundy Numbers/Numbers and Mex) Card Shuffle Problem | TCS Digital Advanced Coding Question Game of N stones where each player can remove 1, 3 or 4 Game Theory (Normal-form game) | Set 3 (Game with Mixed Strategy) Coin game of two corners (Greedy Approach) Combinatorial Game Theory | Set 4 (Sprague - Grundy Theorem) Pareto Optimality and its application in Game Theory TCS Codevita | Holes And Balls Variation in Nim Game Minimax Algorithm in Game Theory | Set 5 (Zobrist Hashing) Josephus Problem | (Iterative Solution) Game Theory (Normal-form Game) | Set 6 (Graphical Method [2 X N] Game) Optimal Strategy for the Divisor game using Dynamic Programming Optimal Strategy for a Game | Set 3 Minesweeper Solver Game Theory (Normal-form Game) | Set 4 (Dominance Property-Pure Strategy) Find the winner of the game with N piles of boxes Chessboard Pawn-Pawn game Find the winner of the Game to Win by erasing any two consecutive similar alphabets         Table of Contents   Optimal Strategy for a Game | DP-31 Minimax Algorithm in Game Theory | Set 1 (Introduction) Minimax Algorithm in Game Theory | Set 3 (Tic-Tac-Toe AI - Finding optimal move) Minimax Algorithm in Game Theory | Set 4 (Alpha-Beta Pruning) Implementation of Tic-Tac-Toe game Combinatorial Game Theory | Set 2 (Game of Nim) Combinatorial Game Theory | Set 1 (Introduction) Minimax Algorithm in Game Theory | Set 2 (Introduction to Evaluation Function) Choice of Area Expectimax Algorithm in Game Theory Find the winner in nim-game Combinatorial Game Theory | Set 3 (Grundy Numbers/Numbers and Mex) Card Shuffle Problem | TCS Digital Advanced Coding Question Game of N stones where each player can remove 1, 3 or 4 Game Theory (Normal-form game) | Set 3 (Game with Mixed Strategy) Coin game of two corners (Greedy Approach) Combinatorial Game Theory | Set 4 (Sprague - Grundy Theorem) Pareto Optimality and its application in Game Theory TCS Codevita | Holes And Balls Variation in Nim Game Minimax Algorithm in Game Theory | Set 5 (Zobrist Hashing) Josephus Problem | (Iterative Solution) Game Theory (Normal-form Game) | Set 6 (Graphical Method [2 X N] Game) Optimal Strategy for the Divisor game using Dynamic Programming Optimal Strategy for a Game | Set 3 Minesweeper Solver Game Theory (Normal-form Game) | Set 4 (Dominance Property-Pure Strategy) Find the winner of the game with N piles of boxes Chessboard Pawn-Pawn game Find the winner of the Game to Win by erasing any two consecutive similar alphabets          Improve Article     Save Article     Like Article     Minimise moves to reduce N to 0 using given operations    Last Updated : 26 Nov, 2021     Given a number N, and some operations that can be performed, the task is to find the minimum number of moves to convert N to 0. In one move operation, one of the following can be performed:  Increment or decrement the value of N by 1. Multiply the value of N by -1. Divide the value of N by 2 if N is even. Reduce the value of N to ?N if N is a perfect square.  Example:  Attention reader! Don?t stop learning now. Get hold of all the important mathematical concepts for competitive programming with the Essential Maths for CP Course at a student-friendly price. To complete your preparation from learning a language to DS Algo and many more,&nbsp; please refer Complete Interview Preparation Course.   Input: N = 50Output: 6Explanation: The moves performed are: 50 (/2) -&gt; 25 (?) -&gt; 5 (- 1) -&gt; 4 (/2) -&gt; 2 (-1) -&gt; 1 (-1) -&gt; 0. Therefore, the required number of moves is 6 which is the minimum possible. Input: N = 75Output: 8         &nbsp;  Approach: The given problem can be solved efficiently by using dynamic programming. The idea is to use hashing and breadth-first search on 0 till N is reached. Hashing is used so that the same number is not visited twice. The below steps can be followed to solve the problem:  Use BFS by adding all the possible numbers that can be reached from 0 into a queue and also in a hashmap so that they are not visited again Return the number of moves calculated after reaching N.  Below is the implementation of the above approach:  Java                          // Java implementation for the above approach   &nbsp;&nbsp;   import java.io.*;   import java.util.*;   &nbsp;&nbsp;   class GFG {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; static class Node {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int val, moves;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Constructor   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Node( int val,  int moves)   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this .val = val;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this .moves = moves;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; // Function to calculate   &nbsp;&nbsp;&nbsp;&nbsp; // minimum number of moves   &nbsp;&nbsp;&nbsp;&nbsp; // required to convert N to 0   &nbsp;&nbsp;&nbsp;&nbsp; public static int minMoves( int N)   &nbsp;&nbsp;&nbsp;&nbsp; {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialize a hashset   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to mark the visited numbers   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set&lt;Integer&gt; set =  new HashSet&lt;&gt;();   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialize a queue   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Queue&lt;Node&gt; q =  new LinkedList&lt;&gt;();   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Mark 0 as visited   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set.add( 0 );   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add 0 into the queue   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.add( new Node( 0 ,  0 ));   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // while N is not reached   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (!q.isEmpty()) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // poll out current node   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node curr = q.poll();   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If N is reached   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (curr.val == N) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Return the number of moves used   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return curr.moves;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!set.contains(curr.val -  1 )) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Mark the number as visited   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set.add(curr.val -  1 );   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add the number in the queue   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.add( new Node(curr.val -  1 ,   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; curr.moves +  1 ));   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!set.contains(curr.val +  1 )) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Mark the number as visited   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set.add(curr.val +  1 );   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add the number in the queue   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.add( new Node(curr.val +  1 ,   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; curr.moves +  1 ));   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!set.contains(curr.val *  2 )) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Mark the number as visited   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set.add(curr.val *  2 );   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add the number in the queue   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.add( new Node(curr.val *  2 ,   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; curr.moves +  1 ));   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int sqr = curr.val * curr.val;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!set.contains(sqr)) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Mark the number as visited   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set.add(sqr);   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add the number in the queue   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.add( new Node(sqr,   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; curr.moves +  1 ));   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!set.contains(-curr.val)) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Mark the number as visited   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set.add(-curr.val);   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add the number in the queue   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.add( new Node(-curr.val,   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; curr.moves +  1 ));   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return - 1 ;   &nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; // Driver code   &nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args)   &nbsp;&nbsp;&nbsp;&nbsp; {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int N =  50 ;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Call the function   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and print the answer   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(minMoves(N));   &nbsp;&nbsp;&nbsp;&nbsp; }   }                       Output 6  Time Complexity: O(log N)Auxiliary Space: O(K*log N), where K is the possible operations allowed          My Personal Notes arrow_drop_up      Save           Like      Previous  Count of nodes in given N-ary tree such that their subtree is a Binary Tree    Next   Must Do Coding Questions for Product Based Companies          Recommended Articles     Page :             Minimise N such that sum of count of all factors upto N is greater than or equal to X   28, Jun 20       Reduce a given number to form a key by the given operations   17, Sep 20       Count operations of the given type required to reduce N to 0   24, Jan 19       Count the number of operations required to reduce the given number   29, Mar 19           Minimum number of given operations required to reduce the array to 0 element   07, May 19       Reduce N to 1 with minimum number of given operations   30, Sep 19       Reduce a number to 1 by performing given operations | Set 2   22, Jan 20       Minimum steps to reduce N to 0 by given operations   24, Aug 20           Reduce N to 0 or less by given X and Y operations   03, Sep 20       Reduce all array elements to zero by performing given operations thrice   22, Feb 21       Reduce a number to 1 by performing given operations | Set 3   15, Jun 21       Minimize arithmetic operations to be performed on adjacent elements of given Array to reduce it   20, Sep 21           Minimum number of given operations required to be performed to reduce N to 0   14, Jul 21       Minimum number of given operations required to reduce a number to 2   14, Jun 21       Count of moves to escape given Matrix from given position based on given conditions   25, Nov 21       Minimum number of operations required to reduce N to 1   13, Nov 18           Find maximum operations to reduce N to 1   04, Feb 19       Min operations to reduce N to 1 by multiplying by A or dividing by B   13, Jul 20       Min operations to reduce N by multiplying by any number or taking square root   13, Jul 20       Minimum number of operations required to reduce N to 0   05, Aug 20           Minimum operations to reduce N to a prime number by subtracting with its highest divisor   21, Oct 21       Minimum operations required to reduce N to 0 by either replacing N with N/M or incrementing M by 1   28, Oct 21       Min number of operations to reduce N to 0 by subtracting any digits from N   26, Jun 20       Minimize operations to reduce N to 2 by repeatedly reducing by 3 or dividing by 5   29, Jul 21                Article Contributed By :         rahul mishra   @rahul mishra        Vote for difficulty    Easy Normal Medium Hard Expert         Article Tags :   BFS Game Theory Hash Mathematical     Practice Tags :   Hash Mathematical Game Theory BFS       Report Issue        Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.     Load Comments                      What's New              DSA Live Classes for Working Professionals    View Details                 Competitive Programming Live Classes for Students    View Details                 DSA Self Paced Course    View Details                     Most popular in Game Theory       Game Theory (Normal-form Game) | Set 7 (Graphical Method [M X 2] Game) Monty Hall Problem's Simulation Using Pygame Classification of Algorithms with Examples Find the player who will win by choosing a number in range [1, K] with sum total N Count of squares reachable by a Bishop initially placed at top left on a given NxM chessboard                    Most visited in Hash       Given an array A[] and a number x, check for pair in A[] with sum as x Internal Working of HashMap in Java Hashing | Set 3 (Open Addressing) Count pairs with given sum Hashing | Set 2 (Separate Chaining)                              &times;                                                                       5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305    feedback@geeksforgeeks.org                 Company About Us Careers Privacy Policy Contact Us Copyright Policy   Learn Algorithms Data Structures Languages CS Subjects Video Tutorials   Web Development Web Tutorials HTML CSS JavaScript Bootstrap   Contribute Write an Article Write Interview Experience Internships Videos      @geeksforgeeks , Some rights reserved            We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy &amp; Privacy Policy  Got It !
Longest balanced binary substring with equal count of 1s and 0s - GeeksforGeeks                                                   Skip to content                                                      Tutorials  Practice DS &amp; Algo.  Must Do Questions DSA Topic-wise DSA Company-wise  Algorithms  Analysis of Algorithms  Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question  Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms  Data Structures  Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures  Interview Corner  Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes  Languages  C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin  CS Subjects  Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering  GATE  GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS  Web Technologies  HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP  Software Designs  Software Design Patterns System Design Tutorial  School Learning  School Programming Mathematics  Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus  Maths Notes (Class 8-12)  Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes  NCERT Solutions  Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution  RD Sharma Solutions  Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution  Physics Notes (Class 8-11)  Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes   ISRO CS  ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam  UGC NET CS  UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers   Student  Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship  Jobs  Apply for Jobs Post a Job  Courses                    Write   Come write articles for us and get featured         Practice   Learn and code with the best industry experts         Premium   Get access to ad-free content, doubt assistance and more!         Jobs   Come and find your dream job with us       Geeks Digest Quizzes Geeks Campus   Gblog Articles IDE Campus Mantri                Home Saved Videos Courses   GBlog Puzzles What's New ?        Change Language         Data Structures Algorithms Interview Preparation Topic-wise Practice C++ Java Python Competitive Programming Machine Learning Web Development Puzzles Project Ideas School Learning          Related Articles         ?       Related Articles    Arrays in Java Write a program to reverse an array or string Largest Sum Contiguous Subarray Program for array rotation Stack Data Structure (Introduction and Program) Arrays in C/C++ Given an array A[] and a number x, check for pair in A[] with sum as x Linear Search Maximum and minimum of an array using minimum number of comparisons K'th Smallest/Largest Element in Unsorted Array | Set 1 Subset Sum Problem | DP-25 Multidimensional Arrays in Java Write a program to reverse an array or string Python | Using 2D arrays/lists the right way Count Inversions in an array | Set 1 (Using Merge Sort) Find the Missing Number Array of Strings in C++ (5 Different Ways to Create) Search an element in a sorted and rotated array Queue | Set 1 (Introduction and Array Implementation) Linked List vs Array Program to find largest element in an array Sort an array of 0s, 1s and 2s Print a given matrix in spiral form Merge two sorted arrays Stock Buy Sell to Maximize Profit k largest(or smallest) elements in an array | added Min Heap method Find subarray with given sum | Set 1 (Nonnegative Numbers) Sliding Window Maximum (Maximum of all subarrays of size k) Next Greater Element Find Second largest element in an array         Table of Contents   Arrays in Java Write a program to reverse an array or string Largest Sum Contiguous Subarray Program for array rotation Stack Data Structure (Introduction and Program) Arrays in C/C++ Given an array A[] and a number x, check for pair in A[] with sum as x Linear Search Maximum and minimum of an array using minimum number of comparisons K'th Smallest/Largest Element in Unsorted Array | Set 1 Subset Sum Problem | DP-25 Multidimensional Arrays in Java Write a program to reverse an array or string Python | Using 2D arrays/lists the right way Count Inversions in an array | Set 1 (Using Merge Sort) Find the Missing Number Array of Strings in C++ (5 Different Ways to Create) Search an element in a sorted and rotated array Queue | Set 1 (Introduction and Array Implementation) Linked List vs Array Program to find largest element in an array Sort an array of 0s, 1s and 2s Print a given matrix in spiral form Merge two sorted arrays Stock Buy Sell to Maximize Profit k largest(or smallest) elements in an array | added Min Heap method Find subarray with given sum | Set 1 (Nonnegative Numbers) Sliding Window Maximum (Maximum of all subarrays of size k) Next Greater Element Find Second largest element in an array          Improve Article     Save Article     Like Article     Longest balanced binary substring with equal count of 1s and 0s    Last Updated : 26 Nov, 2021     Given a binary string str[] of size N. The task is to find the longest balanced substring. A substring is balanced if it contains an equal number of 0 and 1. Examples: &nbsp;  Attention reader! Don?t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready.&nbsp; To complete your preparation from learning a language to DS Algo and many more,&nbsp; please refer Complete Interview Preparation Course. In case you wish to attend live classes with experts, please refer DSA Live Classes for Working Professionals and Competitive Programming Live for Students.   Input: str = ?110101010?Output: 10101010Explanation: The formed substring contain equal count of 1 and 0 i.e, count of 1 and 0 is same equal to 4.       Input: str = ?0000?Output: -1   Naive Approach: A simple solution is to use two nested loops to generate every substring. And a third loop to count a number of 0s and 1s in the current substring. Then print the longest substring among them.&nbsp;Time Complexity: O(N^3)Auxiliary Space: O(1) Efficient solution: With the help of precomputation, store the difference between the count of 0s and the count of 1s from start till current index. This difference can then be used to determine the longest substring with equal 0s and 1s, as the longest distance between any duplicate values in the difference array. Use a Map-based hashing to do precomputation. Follow the steps below to solve the problem:  Initialize the map&lt;int, int&gt; m[]. Set the value of m[0] as -1. Initialize the variables count_0, count_1, res, start and end. Traverse the string str[] using the variable i and perform the following tasks:  Keep the track of counts of 1s and 0s as count_1 and count_0 respectively. See if the current difference between count_1 and count_0 is already there in the map m[] or not. If yes, then perform the following tasks:  The substring from the previous appearance and current index has same number of 0s and 1s. If the current found substring?s length is greater than res then set the found substring as the answer so far.  If it is appearing for the first time, store the current difference and the current index in the map i.e, m[count_1 ? count_0] equals i.  If count_0 and count_1 are both 0, then print -1. Otherwise, print the substring from start to end.  Below is the implementation of the above approach.  C++                          // C++ for finding length   // of longest balanced substring   #include &lt;bits/stdc++.h&gt;   using namespace std;   &nbsp;&nbsp;   // Returns length of the longest substring   // with equal number of zeros and ones.   string stringLen(string str)   {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; // Create a map to store differences   &nbsp;&nbsp;&nbsp;&nbsp; // between counts of 1s and 0s.   &nbsp;&nbsp;&nbsp;&nbsp; map&lt; int ,  int &gt; m;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; // Initially difference is 0.   &nbsp;&nbsp;&nbsp;&nbsp; m[0] = -1;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; int count_0 = 0, count_1 = 0;   &nbsp;&nbsp;&nbsp;&nbsp; int start, end, res = 0;   &nbsp;&nbsp;&nbsp;&nbsp; for ( int i = 0; i &lt; str.size(); i++) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Keeping track of counts of   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 0s and 1s.   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (str[i] ==  '0' )   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count_0++;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count_1++;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If difference between current counts   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // already exists, then substring between   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // previous and current index has same   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // no. of 0s and 1s. Update result if this   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // substring is more than current result.   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (m.find(count_1 - count_0) != m.end()) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((i - m[count_1 - count_0]) &gt; res) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; start = m.find(   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count_1 - count_0)   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt;second;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end = i;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res = end - start;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If current difference   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // is seen first time.   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m[count_1 - count_0] = i;   &nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; if (count_0 == 0 || count_1 == 0)   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;-1&quot; ;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; // Return the substring   &nbsp;&nbsp;&nbsp;&nbsp; // between found indices   &nbsp;&nbsp;&nbsp;&nbsp; return str.substr(start + 1, end + 1);   }   &nbsp;&nbsp;   // Driver Code   int main()   {   &nbsp;&nbsp;&nbsp;&nbsp; string str =  &quot;110101010&quot; ;   &nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; stringLen(str);   &nbsp;&nbsp;&nbsp;&nbsp; return 0;   }                       Output 10101010  Time Complexity: O(N)Auxiliary Space: O(N)          My Personal Notes arrow_drop_up      Save           Like      Previous  Length of longest subarray having sum in given range [L, R]    Next   Count of nodes in a given N-ary tree having distance to all leaf nodes equal in their subtree          Recommended Articles     Page :             Count of binary strings of length N having equal count of 0's and 1's and count of 1's ? count of 0's in each prefix substring   25, Jul 20       Maximum possible balanced binary substring splits with at most cost K   18, Nov 21       Longest Substring having equal count of Vowels and Consonants   19, Aug 20       Length of the largest substring which have character with frequency greater than or equal to half of the substring   29, May 19           Length of the longest substring with equal 1s and 0s   25, Oct 17       Longest equal substring with cost less than K   05, Feb 20       Length of longest substring to be deleted to make a string equal to another string   15, Sep 20       Count number of binary strings such that there is no substring of length greater than or equal to 3 with all 1's   30, Sep 19           Count occurrences of substring X before every occurrence of substring Y in a given string   16, May 21       Length of Longest Balanced Subsequence   19, Oct 17       Length of longest balanced parentheses prefix   08, Dec 17       Count Balanced Binary Trees of Height h   17, Jun 17           Count balanced nodes present in a binary tree   21, Sep 20       Longest common substring in binary representation of two numbers   05, Aug 17       Longest substring with K unique characters using Binary Search   27, Dec 19       Longest substring consisting of vowels using Binary Search   30, Jun 20           Partition given string in such manner that i'th substring is sum of (i-1)'th and (i-2)'th substring   15, Feb 18       Check whether two strings can be made equal by reversing substring of equal length from both strings   15, Jul 20       Longest substring with count of 1s more than 0s   17, Aug 18       Minimize count of 0s required to be removed to maximize length of longest substring of 1s   22, Jan 21           Maximum length of a substring required to be flipped repeatedly to make all characters of binary string equal to 0   05, Aug 21       Minimum removals to make a string concatenation of a substring of 0s followed by a substring of 1s   14, Dec 20       Minimum length of substring whose rotation generates a palindromic substring   21, May 20       Check if a string can be split into two substrings such that one substring is a substring of the other   23, Dec 20                Article Contributed By :         Code_r   @Code_r        Vote for difficulty    Easy Normal Medium Hard Expert         Article Tags :   binary-string Arrays Bit Magic Hash Mathematical Strings     Practice Tags :   Arrays Hash Strings Mathematical Bit Magic       Report Issue        Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.     Load Comments                      What's New              DSA Live Classes for Working Professionals    View Details                 Competitive Programming Live Classes for Students    View Details                 DSA Self Paced Course    View Details                     Most popular in Arrays       Trapping Rain Water Given an array of size n and a number k, find all elements that appear more than n/k times Program to find sum of elements in a given array Building Heap from Array Remove duplicates from sorted array                    Most visited in Bit Magic       Bitwise Operators in C/C++ Left Shift and Right Shift Operators in C/C++ Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming) Count set bits in an integer How to swap two numbers without using a temporary variable?                              &times;                                                                       5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305    feedback@geeksforgeeks.org                 Company About Us Careers Privacy Policy Contact Us Copyright Policy   Learn Algorithms Data Structures Languages CS Subjects Video Tutorials   Web Development Web Tutorials HTML CSS JavaScript Bootstrap   Contribute Write an Article Write Interview Experience Internships Videos      @geeksforgeeks , Some rights reserved            We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy &amp; Privacy Policy  Got It !
Maximum count of connected duplicate nodes in given N-ary Tree - GeeksforGeeks                                                        Skip to content                                                      Tutorials  Practice DS &amp; Algo.  Must Do Questions DSA Topic-wise DSA Company-wise  Algorithms  Analysis of Algorithms  Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question  Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms  Data Structures  Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures  Interview Corner  Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes  Languages  C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin  CS Subjects  Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering  GATE  GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS  Web Technologies  HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP  Software Designs  Software Design Patterns System Design Tutorial  School Learning  School Programming Mathematics  Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus  Maths Notes (Class 8-12)  Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes  NCERT Solutions  Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution  RD Sharma Solutions  Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution  Physics Notes (Class 8-11)  Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes   ISRO CS  ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam  UGC NET CS  UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers   Student  Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship  Jobs  Apply for Jobs Post a Job  Courses                    Write   Come write articles for us and get featured         Practice   Learn and code with the best industry experts         Premium   Get access to ad-free content, doubt assistance and more!         Jobs   Come and find your dream job with us       Geeks Digest Quizzes Geeks Campus   Gblog Articles IDE Campus Mantri                Home Saved Videos Courses   GBlog Puzzles What's New ?        Change Language         Data Structures Algorithms Interview Preparation Topic-wise Practice C++ Java Python Competitive Programming Machine Learning Web Development Puzzles Project Ideas School Learning          Related Articles         ?       Related Articles    Tree Traversals (Inorder, Preorder and Postorder) Level Order Binary Tree Traversal AVL Tree | Set 1 (Insertion) Binary Tree | Set 1 (Introduction) Write a Program to Find the Maximum Depth or Height of a Tree Inorder Tree Traversal without Recursion A program to check if a binary tree is BST or not Binary Tree | Set 3 (Types of Binary Tree) Binary Tree | Set 2 (Properties) Lowest Common Ancestor in a Binary Tree | Set 1 Program to count leaf nodes in a binary tree Insertion in a Binary Tree in level order Construct Tree from given Inorder and Preorder traversals BFS vs DFS for Binary Tree Complexity of different operations in Binary tree, Binary Search Tree and AVL tree Deletion in a Binary Tree Print Left View of a Binary Tree Diameter of a Binary Tree How to determine if a binary tree is height-balanced? Segment Tree | Set 1 (Sum of given range) Sorted Array to Balanced BST Print Nodes in Top View of Binary Tree Relationship between number of nodes and height of binary tree Expression Tree Construct a complete binary tree from given array in level order fashion Binary Tree (Array implementation) Inorder Tree Traversal without recursion and without stack! Print a Binary Tree in Vertical Order | Set 2 (Map based Method) Lowest Common Ancestor in a Binary Search Tree. AVL Tree | Set 2 (Deletion)         Table of Contents   Tree Traversals (Inorder, Preorder and Postorder) Level Order Binary Tree Traversal AVL Tree | Set 1 (Insertion) Binary Tree | Set 1 (Introduction) Write a Program to Find the Maximum Depth or Height of a Tree Inorder Tree Traversal without Recursion A program to check if a binary tree is BST or not Binary Tree | Set 3 (Types of Binary Tree) Binary Tree | Set 2 (Properties) Lowest Common Ancestor in a Binary Tree | Set 1 Program to count leaf nodes in a binary tree Insertion in a Binary Tree in level order Construct Tree from given Inorder and Preorder traversals BFS vs DFS for Binary Tree Complexity of different operations in Binary tree, Binary Search Tree and AVL tree Deletion in a Binary Tree Print Left View of a Binary Tree Diameter of a Binary Tree How to determine if a binary tree is height-balanced? Segment Tree | Set 1 (Sum of given range) Sorted Array to Balanced BST Print Nodes in Top View of Binary Tree Relationship between number of nodes and height of binary tree Expression Tree Construct a complete binary tree from given array in level order fashion Binary Tree (Array implementation) Inorder Tree Traversal without recursion and without stack! Print a Binary Tree in Vertical Order | Set 2 (Map based Method) Lowest Common Ancestor in a Binary Search Tree. AVL Tree | Set 2 (Deletion)          Improve Article     Save Article     Like Article     Maximum count of connected duplicate nodes in given N-ary Tree    Last Updated : 26 Nov, 2021     Given a generic tree such that each node has a value associated with it, the task is to find the largest number of connected nodes having the same value in the tree. Two nodes are connected if one node is a child of another node. Example:  Attention reader! Don?t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready.&nbsp; To complete your preparation from learning a language to DS Algo and many more,&nbsp; please refer Complete Interview Preparation Course. In case you wish to attend live classes with experts, please refer DSA Live Classes for Working Professionals and Competitive Programming Live for Students.   Input: Tree in the image belowOutput: 4&nbsp;Explanation: The largest group of connected nodes are of the value 3 with number of nodes equal to 4.       Input: Tree in the image belowOutput: 2   &nbsp;  Approach: The given problem can be solved by using the post-order traversal. The idea is to check if the child node has the same value as its parent node and add 1 to the answer returned from the child node. Below steps can be followed to solve the problem:  Apply&nbsp;post-order traversal on the N-ary tree:  If the root has no children then return 1 to the parent Add all the answers returned from the children nodes whose value is same as current node Update the maximum number of connected nodes  Return the maximum number of connected nodes as the answer  Below is the implementation of the above approach:  Java                          // Java implementation for the above approach   &nbsp;&nbsp;   import java.io.*;   import java.util.*;   &nbsp;&nbsp;   class GFG {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; static class Node {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&lt;Node&gt; children;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int val;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // constructor   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Node( int val)   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this .val = val;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; children =  new ArrayList&lt;&gt;();   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; // Function to find the largest   &nbsp;&nbsp;&nbsp;&nbsp; // number of nodes in a tree   &nbsp;&nbsp;&nbsp;&nbsp; public static int largestGroup(Node root)   &nbsp;&nbsp;&nbsp;&nbsp; {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Base case   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (root ==  null )   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0 ;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialize a variable max   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to calculate largest group   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int [] max =  new int [ 1 ];   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Post-order traversal   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; postOrder(root, max);   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Return the answer   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return max[ 0 ];   &nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; // Post order traversal function   &nbsp;&nbsp;&nbsp;&nbsp; // to calculate the largest group   &nbsp;&nbsp;&nbsp;&nbsp; // of connected nodes   &nbsp;&nbsp;&nbsp;&nbsp; public static int postOrder(   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node root,  int [] max)   &nbsp;&nbsp;&nbsp;&nbsp; {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If the current node has no   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // children then return 1   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (root.children.size() ==  0 )   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1 ;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initilaize a variable sum to   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // calculate largest group connected   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to current node with same value   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // as current node   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int sum =  1 ;   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Iterate through all neighbors   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (Node child : root.children) {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get the value from children   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int nodes = postOrder(child, max);   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If child node value is same as   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // current node then add the   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // returned value to sum   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (child.val == root.val)   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sum += nodes;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Update maximum connected   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // nodes if sum is greater   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; max[ 0 ] = Math.max(max[ 0 ], sum);   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Return the connected group   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to the current node   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sum;   &nbsp;&nbsp;&nbsp;&nbsp; }   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; // Driver code   &nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args)   &nbsp;&nbsp;&nbsp;&nbsp; {   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialize the tree   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node three1 =  new Node( 3 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node three2 =  new Node( 3 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node three3 =  new Node( 3 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node three4 =  new Node( 3 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node two1 =  new Node( 2 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node two2 =  new Node( 2 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node two3 =  new Node( 2 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node two4 =  new Node( 2 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node four1 =  new Node( 4 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node four2 =  new Node( 4 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node four3 =  new Node( 4 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node one1 =  new Node( 1 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node one2 =  new Node( 1 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node one3 =  new Node( 1 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node one4 =  new Node( 1 );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; three2.children.add(two1);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; three2.children.add(three1);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; three2.children.add(three3);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; four1.children.add(four2);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; four1.children.add(four3);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; two2.children.add(one1);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; two2.children.add(one2);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; two2.children.add(two3);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; one3.children.add(one4);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; one3.children.add(two4);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; three4.children.add(three2);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; three4.children.add(four1);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; three4.children.add(two2);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; three4.children.add(one3);   &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Call the function   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and print the result   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; largestGroup(three4));   &nbsp;&nbsp;&nbsp;&nbsp; }   }                       Output:  4   Time Complexity: O(N), where N is the number of nodes in the treeAuxiliary Space: O(H), H is the height of the tree          My Personal Notes arrow_drop_up      Save           Like      Previous  Minimum product subarray of size K including negative integers    Next   Count of nodes in given N-ary tree such that their subtree is a Binary Tree          Recommended Articles     Page :             Count the nodes of a tree whose weighted string does not contain any duplicate characters   28, May 19       Find height of a special binary tree whose leaf nodes are connected   17, Aug 16       Count the nodes of the tree which make a pangram when concatenated with the sub-tree nodes   28, May 19       Count of all prime weight nodes between given nodes in the given Tree   16, May 20           Count of nodes in a given N-ary tree having distance to all leaf nodes equal in their subtree   26, Nov 21       Queries to count connected components after removal of a vertex from a Tree   16, Sep 20       Construct a Tree whose sum of nodes of all the root to leaf path is not divisible by the count of nodes in that path   19, Mar 21       Count of nodes in given N-ary tree such that their subtree is a Binary Tree   26, Nov 21           Common nodes in the inorder sequence of a tree between given two nodes in O(1) space   07, May 20       Check if a Tree can be split into K equal connected components   30, Mar 20       Maximum number of edges to be removed to contain exactly K connected components in the Graph   16, Sep 20       Sum of nodes in a binary tree having only the left child nodes   09, Nov 21           Construct XOR tree by Given leaf nodes of Perfect Binary Tree   13, Jan 20       Minimum difference between any two weighted nodes in Sum Tree of the given Tree   27, May 20       Convert given Binary Tree to Symmetric Tree by adding minimum number of nodes   15, Oct 21       Maximum sub-tree sum in a Binary Tree such that the sub-tree is also a BST   20, Mar 19           Queries to find the maximum Xor value between X and the nodes of a given level of a perfect binary tree   15, May 19       Query to find the maximum and minimum weight between two nodes in the given tree using LCA.   12, May 20       Maximum sum of leaf nodes among all levels of the given binary tree   25, Apr 19       Maximum sum of non-leaf nodes among all levels of the given binary tree   29, Apr 19           Check if a Binary Tree contains duplicate subtrees of size 2 or more   06, Mar 17       Check if a Binary Tree (not BST) has duplicate values   26, Jan 18       Duplicate subtree in Binary Tree | SET 2   30, Aug 19       Given a n-ary tree, count number of nodes which have more number of children than parents   02, Oct 17                Article Contributed By :         shahid24sunny17   @shahid24sunny17        Vote for difficulty    Easy Normal Medium Hard Expert         Article Tags :   n-ary-tree tree-traversal Tree     Practice Tags :   Tree       Report Issue        Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.     Load Comments                      What's New              DSA Live Classes for Working Professionals    View Details                 Competitive Programming Live Classes for Students    View Details                 DSA Self Paced Course    View Details                     Most popular in Tree       Decision Tree DFS traversal of a tree using recursion Find maximum (or minimum) in Binary Tree Real-time application of Data Structures Print Postorder traversal from given Inorder and Preorder traversals                    More related articles in Tree       Convert a normal BST to Balanced BST Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Maximum Path Sum in a Binary Tree Practice questions on Height balanced/AVL Tree Construct a Binary Tree from Postorder and Inorder                              &times;                                                                       5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305    feedback@geeksforgeeks.org                 Company About Us Careers Privacy Policy Contact Us Copyright Policy   Learn Algorithms Data Structures Languages CS Subjects Video Tutorials   Web Development Web Tutorials HTML CSS JavaScript Bootstrap   Contribute Write an Article Write Interview Experience Internships Videos      @geeksforgeeks , Some rights reserved            We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy &amp; Privacy Policy  Got It !